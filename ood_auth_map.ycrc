#!/usr/bin/env ruby
$LOAD_PATH.unshift File.expand_path('../../lib', __FILE__)

require 'ood_auth_map'

class YcrcMap < OodAuthMap
  # Default regular expression to use when parsing authenticated username
  DEFAULT_REGEX = "^(.+)$"
  $parser_selector = "" # we have "REGEX", "MAPFILE", "AUTOMAP" 

  # Body of option parser
  define_body do |parser|
    parser.separator ""
    parser.separator "parse an authenticated user from using one of three methods: REGEX, MAPFILE, AUTOMAP."

    parser.separator ""
    parser.separator "General options:"

    options[:automap] = ""
    parser.on("-a", "--automap=STRING", "# automatic user mapping; a '%' in STRING will be replaced by the authenticated username", "# Default: None") do |automap|
      options[:automap] = automap
      parser_selector = "STRING"
    end

    options[:mapfile] = ""
    parser.on("-f", "--mapfile=/path/to/map_file", "# specify the map_file for user mapping", " Default: None") do |mapfile|
      options[:mapfile] = mapfile
      parser_selector = "MAPFILE"
    end

    options[:regex] = DEFAULT_REGEX
    parser.on("-r", "--regex=REGEX", "# Regular expression used to capture the system-level username", "# Default: #{DEFAULT_REGEX}") do |regex|
      options[:regex] = regex
      parser_selector = "REGEX"
    end
  end

  # Footer of option parser
  define_footer do |parser|
    parser.separator ""
    parser.separator <<-EOF.gsub(/^ {6}/, "")
      Examples:
      1.  If the authenticated username completely matches the system-level
          username use the default regular expression:

              #{File.basename($0)} alice

          this will return `alice`.

          For more complicated strings, a regular expression needs to be
          supplied as an option:

              #{File.basename($0)} --regex='^(\\w+)@yale.edu$' alice@yale.edu

          where the first captured match is returned as the system-level username.

          If no match is found in the string, then a blank line is returned:

              #{File.basename($0)} --regex='^(\\w+)@yale.edu$' alice@harvard.edu

          this will return a blank line, meaning no match was found.

      2.  To scan a mapfile using an authenticated username:

              #{File.basename($0)} --file=/path/to/mapfile username

          Each entry of the mapfile is given in the following format:
   
              "authenticated_user" cluster_user

          It will return cluster_user for the first matched authenticated_user, 
          and return an empty string if no matches are found.

      3. Autmomatially map the authenticated username to the system-level username 
         following the pattern specified in STRING.

             #{File.basename($0)} --automap=foo_%_bar alice

         this will return `foo_alice_bar`. Automap always retruns true.

    EOF
    parser.separator ""
  end

  DEFAULT_MAPFILE= '/etc/ood/config/map_file'

  define_run do |auth_user|

    # If the default mapfile exists, scan it first. This is intended for system admins to impersonate a user for troubleshooting
    if File.file?(DEFAULT_MAPFILE)
      if sys_user =  Helpers.parse_mapfile(DEFAULT_MAPFILE, auth_user)
        puts sys_user
        exit(true)
      end
    end

    case $parser_selector
    when "REGEX"
      if sys_user = Helpers.parse_string(auth_user, /#{options[:regex]}/)
        puts sys_user
        exit(true)
      else
        puts ""
        exit(false)
      end
    when "MAPFILE"
      if sys_user = Helpers.parse_mapfile(options[:mapfile], auth_user)
        puts sys_user
        exit(true)
      else
        puts ""
        exit(false)
      end
    when "AUTOMAP"
      puts options[:automap].sub('%', auth_user)
      exit(true)
    else
      puts ""
      exit(false)
    end
  end
end

# Start the workflow of the YCRC user mapping CLI
YcrcMap.run
